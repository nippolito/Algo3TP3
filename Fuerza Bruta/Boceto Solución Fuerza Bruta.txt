1- Recorro recursivamente (backtracking pero sin poda) todas las combinaciones de vértices:
	> En cada paso elijo usar o no el nodo en el que estoy parado
	> A los n pasos ya tengo un vector/lista con los nodos que estoy usando en esa rama
2- Para cada hoja me fijo si es una clique:
	> Recorro cada vector/lista de adelante hacia atrás chequeando que cada nodo sea adyacente a los siguientes
3- En este punto ya me quedé con un vector de vectores/listas (con todas las cliques), así que lo recorro y elijo el que tenga frontera con cardilanidad máxima. El proceso para chequear la cardilanidad de la frontera de cada clique sería:
	> Recorro el vector/lista y me fijo para cada nodo cuántos adyacentes tienen que NO pertenezcan a ese vector
4- Devuelvo la clique que tenga frontera de cardinalidad máxima y todos felices comiendo perdices


Complejidad final: O(2^n + ... + ... + ...) = O(2^n)


Se pueden agregar podas en algún lugar del backtracking para acelerar el proceso? Quizás sí..
	> Se me ocurrió que antes de elegir la opción "uso este nodo", chequear que sea adyacente a los que ya están en ese vector
	> Para desechar cliques porque la cardinalidad de su frontera va a ser peor a otra no se me ocurre nada. Será posible o no?


Esta solución es fuerza bruta. Ya estuve investigando algunos algoritmos de backtracking que según leí son eficientes y sirven para encontrar cliques maximales (lo que nos sirve también ya que toda clique maximal tiene cliques no maximales adentro, que vamos a tener que investigar, por supuesto).
Sin embargo, estas soluciones son bastante complejas –mirar Bron Kerbosch algorithm–.