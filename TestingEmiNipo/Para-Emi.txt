¿QUÉ CREO QUE HAY QUE HACER?
	> Gráficos totales:
		> Completos y mitad aristas random tiempos Heur1, Heur2, Exacto hasta n = 24 o 23 (un gráfico con 6 curvas). ESTE SEGURO
		> Completos y mitad aristas random resultado Heur1, Heur2, Exacto hasta n = 24 o 23 (un gráfico con 6 curvas). ESTE SEGURO
		> Completos hasta n grande con curva complejidad Heur1, Heur2 (un gráfico con 4 curvas). Esto es para justificar las complejidades. ESTE SEGURO ------------ OK
		> Peor caso Emi y Nipo con cada uno de los algoritmos tiempos hasta n grande (un gráfico con 4 curvas). ESTE NO TAN SEGURO
		> Peor caso Emi y Nipo con cada uno de los algoritmos resultados hasta n grande (un gráfico con 4 curvas). ESTE SEGURO
		> Al azar con cierta densidad de aristas hasta n grande. ESTE SEGURO, DOS CON DENSIDADES DISTINTAS

¿QUÉ HICE YO?
	> Pasé las dos heurísticas a un único .h (Heur.h) en la carpeta 'TestingEmiNipo' y puse todo lo necesario ahí (un único archivo para testear, el generador de grafos de grego, el script que vas a leer en la siguiente linea, etc).
	> Un script (script.cpp) para que el generador de grafos de Grego genere un archivo con:
		> Para cada n desde 5 a 600, 40 instancias distintas de grafos con una clique de 4 o de 10 (según el n) y densidad 0.5
		> Para cada n desde 5 a 600, 40 instancias distintas de grafos con una clique de 4 o de 10 (según el n) y densidad 0.1
		> Para cada n desde 5 a 600, 5 instancias (más que nada para tomar el promedio en tiempos) de grafos completos
		El problema es que cuando intenté correr el script y el generador a la vez como dice el readme de Grego me tiró error y no pude generar nada :P
		La idea es que una vez que funcione esto, hay que tener un código que te levante los grafos que saca el generador en un txt y vaya haciendo los tests con nuestras dos heurísticas (tiempo y resultado).
		La razón por la que arranqué con n = 5 es que mi generador de grafo tira segmentation fault con n más pequeños. No es problema ya que los n tan chiquitos no importan, copiamos cualquier valor congruente para generar el gráfico y listo jaja
	> Hice las funciones que experimenten con tu grafo malo y mi grafo malo para ambas heurísticas (o sea, una función experimenta para n desde 5 hasta 600 tu grafo malo con tu heurística y mi heurística con 25 repeticiones en cada n, y la otra función con mi grafo malo lo mismo). NO pude dejar corriendo el test a la noche ya que Grego quiere experimentar con nuestros mismos grafos. Como la función que hice genera los grafos en el medio del mismo test (después fichala), Grego tiene que hacer una función que cada vez que generamos una instancia, la coutee en un txt de forma tal que se convierta en algo que él pueda leer. Así, después de que terminemos de correr todo este test, Grego agarra ese txt y lo usa para testear su búsqueda local.
	> Sé que dejarlo toda una noche (8 a 10 horas) van a alcanzar para correr desde 5 hasta 600 ya que corrí uno de los dos tests (el de mi grafo malo) desde 550 hasta 600 mientras hacía otras boludeces en la PC (como escribir todo esto) y tardó exactamente 49 minutos. Si vemos que más adelante se complica llegar hasta 600, de última agarramos sólo los primeros 500 pero por si acaso tengamos hasta 600.

¿QUÉ PODÉS HACER VOS?
	> Hacer andar el script.cpp
	> Hacer el código de los tests que hay que hacer para graficar lo que te dije antes (o sea, exacto vs heur1 vs heur2 por ejemplo). Esto también incluye armar las funciones n^3 y n^4 que serán necesarias para la curva que corresponda a las complejidades. Tratá de que no sean solo 3 o 4 for anidados y listo sino que metele alguna operación constante adentro así demora un cachito más.
	> Leer experimentación golosos del informe guía que hay en el GIT
	> Hacer todo esto ACOSTADO EN LA CAMA CON LA NOTEBOOOOK, MEJORATE!! :)